uwsgi is an app that runs on the web server -nginx- and it serves the python app -django app-
but i think it can serve others things too, other than only what the apps needs..?
uwsgi    -> wsgi for nginx
mod_wsgi -> wsgi for apache
wsgi = web server gateway inteface / specifications for python apps... thas's cool

the client is a process, just like the the services

the client and the server comunicates over the request-response model.
For what i understand, HTTP carries this request-response thing

Hosts are like the app that the clients want to deal with and tha the server serves, right?
One host computer can have multiple host names, but we preffer to use one

Url indicate: the protocol/hostname/especifications -based on what the client needs or wants from the app-

==== NginX ====
nginx installation folder: /usr/local/Cellar/nginx/1.21.1
configurations: /usr/local/etc/nginx/nginx.conf -port and stuff-
nginx will load all files in: /usr/localetc/nginx/servers/

it has one master process and several worker processes 
configuarion is in /usr/local/etc/nginx/nginx.conf
worker processes do the actual work. The master one only manages things

Employs event-based model to distribute requests among worker processes
nginx -s {signal} -> sends signals to the master process
signals = {stop, quit, reload, reopen}
The master process starts the work process

It looks like these processes are just normal system processes that are used by nginx

nginx.pid -> /usr/loca/var/run/nginx/nginx.pid

nginx is controlled by directives, which are in the nginx.conf
Ex, a context:
  http{
    sendfile  on;
    keepalive_timeout 65;
  }
This is how you control the master process, these are like instructions to the master process
block directive ->  http {}
A block directive with other directives inside is called a context -that nice-

the 4 basic contexts: events, https, server, location 
directives outsides of any context are said to be in the main context -the .conf file-
nginx can have multiple virutual servers
server {
  listen 80;
  # listen 192.168.0.1:8080;
  server_name example.org www.example.org;
}
server {
  listen 80;
  server_name example.net www.example.net;
}

* FastCGI: manages the processe for the requests
it's like a server inside the server. It has its own processes -idk man-
It's more like a service
This thing gives its response to the server, and the server back to the client
Nginx can have multiple FastCGI servers
enables the implementation of per-application
Different kins of request can be redirected trough specific FastCGI servers -that's amazing-

sockets: They permit data exchanging between processes on the same os

Sofwares with differents processes means that they have different address space. Which means... if one gets weird,
the other one is fine -that's cool-
  The server, the FastCGI server, and the application. They all are isolated

FastCGI can run on a remote machine from the server -using TCP between the server and the fastcgi-
  This can be used a connector between the external web server, the internal database and the application
  External server -> FastCGI -> Database and web app
# Load distribution:
  When the web server machine starts to become a bottleneck, you can add other FastCGI apps on diiferent 
  machines "behind the scene" -that's amazing- to handle the heavy traffic 
  You can have several application machines and each one having its specific -configuarion- FastCGI machine and 
  all of them talking to the external web server!
  You can also tailor each machine to the application they are hosting
FastCGI packet format
  1byte 1byte 2byte 2byte xbyte
    |     |     |     |     |------ Data bytes
    |     |     |     ------------- Data Length
    |     |     ------------------- Request ID
    |     ------------------------- Rercord type
    ------------------------------- Protocol version
They can mutliplex because they add an ID -tying the packet to a specific request- to every package, so you can process
the data of multiple request without interference

Packet types -maybe these are the Record types? idk-
  FCGI_PARAMS:      names/values from server to app
  FCGI_STDIN:       sending standard input from the server to app
  FCGI_DATA:        sending filter data (?) to the app
  FCGI_STDOUT:      standard output from the app to the server
  FCGI_STDERR:      standard error from the app the the server
  FCGI_END_REQUEST: ends the request (can be send by the server or the app)

=============
LTS runs on top of TCP
and what about IP ????

==============
./Configure  -> it makes the configuration for your specific system, otherwise... how would it install it?
it also looks for the compiler -c compiler, for example-
configure is a script
  so, when you hit /.configure, you are runnig the script
./configure takes the template called "Makefile.in" and produces the customised Makefile that is used by make
Makefile is used to build the software\
build -> compile source code for executable software
binaries -> compiled code
make         -> this one build the software
the Makefile also defines the instalation and stuff -yeah, it does a lot of stuff-
make install -> and this copies all the files to their correct destination
  a file in PATH

* Autotools
  gnu autotools includes autoconf and automake

macros -> map input to output
==============

the services that start with the operting system are at /Libary/LaunchAgents
